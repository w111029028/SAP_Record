*&---------------------------------------------------------------------*
*& Report ZTIM_TEST15
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ztim_test15.

TABLES:coep.

TYPE-POOLS:slis.

CLASS lcl_event_receiver DEFINITION.
  PUBLIC SECTION.
    METHODS:  handle_double_click FOR EVENT double_click
      OF cl_gui_alv_grid
      IMPORTING e_row e_column.
ENDCLASS.

CLASS lcl_event_receiver IMPLEMENTATION.
  METHOD handle_double_click.
    CONDENSE e_row NO-GAPS.
    CONDENSE e_column NO-GAPS.
    PERFORM drill_down.
  ENDMETHOD.
ENDCLASS.

TYPES:
   BEGIN OF t_coep_header,
     gjahr TYPE coep-gjahr,
     perio TYPE coep-perio,
     "prctr TYPE coep-prctr,
     kostl TYPE coep-kostl,
     wkgbtr TYPE coep-wkgbtr,
   END OF t_coep_header,

   BEGIN OF t_coep_item,
     gjahr TYPE coep-gjahr,
     perio TYPE coep-perio,
     kstar TYPE coep-kstar,
     txt20 TYPE skat-txt20,
     kostl TYPE coep-kostl,
     prctr TYPE coep-prctr,
     wkgbtr TYPE coep-wkgbtr,
   END OF t_coep_item.

DATA:
      gt_header_tmp TYPE STANDARD TABLE OF t_coep_header,
      gt_coep TYPE STANDARD TABLE OF t_coep_header,
      gt_item_tmp TYPE STANDARD TABLE OF t_coep_item,
      gt_coep_item TYPE STANDARD TABLE OF t_coep_item,
      gs_coep LIKE LINE OF gt_coep.

DATA:
      gt_fieldcat_header  TYPE lvc_t_fcat,
      gt_fieldcat_item TYPE lvc_t_fcat,
      gs_fieldcat  TYPE lvc_s_fcat,
      go_header TYPE REF TO cl_gui_custom_container,
      go_header_alv TYPE REF TO cl_gui_alv_grid,
      go_item TYPE REF TO cl_gui_custom_container,
      go_item_alv TYPE REF TO cl_gui_alv_grid,
      go_event_receiver TYPE REF TO lcl_event_receiver.

DATA:
      gt_val TYPE TABLE OF gprval,
      gs_val TYPE gprval,
      gt_col TYPE TABLE OF gprtxt,
      gs_col TYPE gprtxt,
      gt_row TYPE TABLE OF gprtxtla,
      gs_row TYPE gprtxtla,
      gt_val_item TYPE TABLE OF gprval,
      gs_val_item TYPE gprval,
      gt_col_item TYPE TABLE OF gprtxt,
      gs_col_item TYPE gprtxt.

RANGES: gr_gjahr FOR coep-gjahr,
  gr_perio FOR coep-perio,
  gr_kstar FOR coep-kstar,
  gr_kostl FOR coep-kostl,
  gr_sgtxt FOR coep-sgtxt.

PARAMETERS p_gjahr TYPE coep-gjahr.
PARAMETERS p_perio TYPE coep-perio.

DEFINE d_build_fieldcat.
  gs_fieldcat-fieldname  = &2.
  gs_fieldcat-checkbox   = &3.
  gs_fieldcat-edit       = &4.
  gs_fieldcat-no_out     = &5.
  gs_fieldcat-coltext    = &6.
  APPEND gs_fieldcat TO &1.
  CLEAR gs_fieldcat.
END-OF-DEFINITION.

START-OF-SELECTION.

PERFORM get_data.
DATA ok_code TYPE sy-ucomm.

CALL SCREEN 1100.

FORM get_data.
  gr_gjahr-sign = 'I'.
  gr_gjahr-option = 'EQ'.
  gr_gjahr-low = p_gjahr.
  APPEND gr_gjahr.

  IF p_perio IS NOT INITIAL.
    gr_perio-sign = 'I'.
    gr_perio-option = 'EQ'.
    gr_perio-low = p_perio.
    APPEND gr_perio.
  ENDIF.

  gr_kstar-sign = 'I'.
  gr_kstar-option = 'NP'.
  gr_kstar-low = '009*'.
  APPEND gr_kstar.

  " 取 COEP 資料
  SELECT
    coep~kokrs,
    coep~belnr,
    coep~buzei,
    coep~perio,
    coep~gjahr,
    coep~wkgbtr,
    coep~wtgbtr,
    coep~twaer,
    coep~wrttp,
    coep~sgtxt,
    coep~bukrs,
    coep~gsber,
    coep~kostl,
    coep~prctr,
    coep~kstar,
    skat~txt20,
    coep~matnr,
    coep~refbz,
    coep~versn,
    dd07v~ddtext,
    coep~awtyp,
    coep~aufnr,
    coas~scope
    FROM coep
    INNER JOIN cobk
      ON cobk~belnr EQ coep~belnr
      AND cobk~gjahr EQ coep~gjahr
    INNER JOIN skat
      ON coep~kstar EQ skat~saknr
    LEFT JOIN mlhd
      ON cobk~refbn EQ mlhd~belnr
      AND cobk~refgj EQ mlhd~kjahr
    LEFT JOIN dd07v
      ON dd07v~domname EQ 'CK_VGART'
      AND dd07v~ddlanguage EQ 'M'
      AND dd07v~domvalue_l EQ mlhd~vgart
    LEFT JOIN coas
      ON coep~aufnr EQ coas~aufnr
    WHERE coep~gjahr IN @gr_gjahr
      AND coep~perio IN @gr_perio
      AND coep~kokrs EQ 'ITT0'
      AND coep~kstar IN @gr_kstar
      AND coep~wrttp EQ '04'
      "AND coep~vrgng NE 'RKIB'
      AND coep~accasty NE 'OR'
      AND coep~kostl IS NOT INITIAL
      AND skat~spras EQ 'M'
    INTO TABLE @DATA(gt_coep_tmp).

  DELETE gt_coep_tmp WHERE versn = '0PC'.
  DELETE gt_coep_tmp WHERE versn = '0GP'.

  gr_kostl-sign = 'I'.
  gr_kostl-option = 'CP'.
  gr_kostl-low = '10*'.
  APPEND gr_kostl.
  DELETE gt_coep_tmp WHERE kostl NOT IN gr_kostl.

  FREE gr_kstar.
  gr_kstar-sign = 'I'.
  gr_kstar-option = 'CP'.
  gr_kstar-low = '00540000*'.
  APPEND gr_kstar.
  DELETE gt_coep_tmp WHERE kstar IN gr_kstar AND awtyp = 'COBK'.

  FREE gr_kstar.
  gr_kstar-sign = 'I'.
  gr_kstar-option = 'CP'.
  gr_kstar-low = '007*'.
  APPEND gr_kstar.
  DELETE gt_coep_tmp WHERE kstar IN gr_kstar.

  FREE gr_kstar.
  gr_kstar-sign = 'I'.
  gr_kstar-option = 'EQ'.
  gr_kstar-low = '006124001'.
  APPEND gr_kstar.

  DELETE gt_coep_tmp WHERE kstar IN gr_kstar
    AND aufnr IS NOT INITIAL
    AND scope EQ 'OC'.

  MOVE-CORRESPONDING gt_coep_tmp TO gt_header_tmp[].
  MOVE-CORRESPONDING gt_coep_tmp TO gt_item_tmp[].

  SORT gt_header_tmp BY gjahr perio kostl.

  LOOP AT gt_header_tmp ASSIGNING FIELD-SYMBOL(<fs_header_tmp>).
    COLLECT <fs_header_tmp> INTO gt_coep.
  ENDLOOP.

  SORT gt_coep by wkgbtr DESCENDING.
  IF gt_coep IS NOT INITIAL.
    LOOP AT gt_coep ASSIGNING FIELD-SYMBOL(<fs_coep>).
      IF sy-tabix <= 20.
        gs_col-coltxt = <fs_coep>-kostl.
        APPEND gs_col TO gt_col.
      ENDIF.
      CASE sy-tabix.
        WHEN 1.
          gs_val-val1 = <fs_coep>-wkgbtr.
        WHEN 2.
          gs_val-val2 = <fs_coep>-wkgbtr.
        WHEN 3.
          gs_val-val3 = <fs_coep>-wkgbtr.
        WHEN 4.
          gs_val-val4 = <fs_coep>-wkgbtr.
        WHEN 5.
          gs_val-val5 = <fs_coep>-wkgbtr.
        WHEN 6.
          gs_val-val6 = <fs_coep>-wkgbtr.
        WHEN 7.
          gs_val-val7 = <fs_coep>-wkgbtr.
        WHEN 8.
          gs_val-val8 = <fs_coep>-wkgbtr.
        WHEN 9.
          gs_val-val9 = <fs_coep>-wkgbtr.
        WHEN 10.
          gs_val-val10 = <fs_coep>-wkgbtr.
        WHEN 11.
          gs_val-val11 = <fs_coep>-wkgbtr.
        WHEN 12.
          gs_val-val12 = <fs_coep>-wkgbtr.
        WHEN 13.
          gs_val-val13 = <fs_coep>-wkgbtr.
        WHEN 14.
          gs_val-val14 = <fs_coep>-wkgbtr.
        WHEN 15.
          gs_val-val15 = <fs_coep>-wkgbtr.
        WHEN 16.
          gs_val-val16 = <fs_coep>-wkgbtr.
        WHEN 17.
          gs_val-val17 = <fs_coep>-wkgbtr.
        WHEN 18.
          gs_val-val18 = <fs_coep>-wkgbtr.
        WHEN 19.
          gs_val-val19 = <fs_coep>-wkgbtr.
        WHEN 20.
          gs_val-val20 = <fs_coep>-wkgbtr.
      ENDCASE.
    ENDLOOP.
    LOOP AT  gt_coep ASSIGNING FIELD-SYMBOL(<fs_coep_addition>).
      IF sy-tabix > 20.
        gs_val-val21 = gs_val-val21 + <fs_coep_addition>-wkgbtr.
      ENDIF.
    ENDLOOP.

    gs_col-coltxt = '其他'.
    APPEND gs_col TO gt_col.
    APPEND gs_val TO gt_val.
  ENDIF.

*  LOOP AT gt_coep ASSIGNING FIELD-SYMBOL(<fs_coep_1>).
*    gs_row-txt =  <fs_coep_1>-wkgbtr.
*    gs_row-label =  <fs_coep_1>-kostl.
*    APPEND gs_row TO gt_row[].
*  ENDLOOP.
  UNASSIGN:<fs_header_tmp>, <fs_coep>, <fs_coep_addition>.
ENDFORM.

FORM drill_down.
  DATA:t_selected_rows TYPE lvc_t_row,
        ls_selected_row LIKE LINE OF t_selected_rows,
        lv_index TYPE i.

  CALL METHOD go_header_alv->get_selected_rows
    IMPORTING
      et_index_rows   =   t_selected_rows.

  READ TABLE t_selected_rows INDEX 1 INTO ls_selected_row.

  READ TABLE gt_coep INDEX ls_selected_row-index
    INTO gs_coep.

  CALL SCREEN 1200.
ENDFORM.

INCLUDE ztim_test15_status_1100o01.

INCLUDE ztim_test15_user_command_11i01.

INCLUDE ztim_test15_status_1200o01.

INCLUDE ztim_test15_user_command_12i01.
